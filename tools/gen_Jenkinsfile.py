"""Generate the declarative Jenkins pipeline"""

__author__ = 'Jakob Ackermann <das7pad@outlook.com>'

import pathlib


VERSIONS = [
    '3.6.9',    # ubuntu 18.04 LTS  EOL: 2028-04
    '3.6.12',   # latest

    '3.7.5',    # ubuntu 18.04 LTS  EOL: 2028-04
    '3.7.8',    # latest

    '3.8.2',    # ubuntu 20.04 LTS  EOL: 2030-04
    '3.8.5',    # latest
]
PIPELINE = """
//
// This file is autogenerated.
// To update, run:
//
//    make Jenkinsfile
//

pipeline {
    agent none
    environment {
        GIT_COMMITTER_NAME  = 'Joe Doe'
        GIT_COMMITTER_EMAIL = 'joe.doe@example.com'
        HOME                = '/tmp/'
    }
    options {
        timestamps()
        skipDefaultCheckout(true)
    }
    stages {
        stage('Parallel Stage') {
            parallel {
%(stages)s
            }
        }
    }
}
"""

STAGE = """
                stage('Python:%(version)s') {
                    agent {
                        docker {
                            image 'python:%(version)s'
                        }
                    }
                    stages {
                        stage('Python:%(version)s Info') {
                            steps {
                                sh 'curl -sS httpbin.org/ip'
                                sh 'pwd'
                            }
                        }
                        stage('Python:%(version)s Checkout') {
                            steps {
                                checkout scm
                                sh 'make clean'
                            }
                        }
                        stage('Python:%(version)s Test-Env') {
                            steps {
                                sh 'make venv-dev'
                            }
                        }
                        stage('Python:%(version)s Lint') {
                            steps {
                                sh 'make lint'
                            }
                        }
                        stage('Python:%(version)s Tests') {
                            steps {
                                sh 'make test-only'
                            }
                        }
                        stage('Python:%(version)s Install') {
                            steps {
                                sh 'make install'
                            }
                        }
                        stage('Python:%(version)s Cleanup') {
                            steps {
                                sh 'make clean'
                            }
                        }
                    }
                }
"""


def main():
    jenkinsfile = pathlib.Path(__file__).parent.parent / 'Jenkinsfile'

    stages = '\n'.join(
        STAGE.strip('\n') % dict(version=version)
        for version in VERSIONS
    )

    pipeline = PIPELINE.lstrip('\n') % dict(stages=stages)
    jenkinsfile.write_text(pipeline)


if __name__ == '__main__':
    main()
